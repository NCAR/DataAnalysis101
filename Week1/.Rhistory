# Q is block diagonal
# here is how to index the different blocks
LKinfo$latticeInfo$mLevel # number of basis functions at each level
# see also LKinfo$latticeInfo$offset  to get the index for each level
zacksAlpha<- c(
rep( 1.0, LKinfo$latticeInfo$mLevel[1]),
rep( -.5, LKinfo$latticeInfo$mLevel[2]),
rep(  .25,LKinfo$latticeInfo$mLevel[3])
)
QNew<-  diag.spam( 1/ zacksAlpha )%*% Q0
# check
plot( diag( Q0), diag( QNew))
quartz()
# roll your own:
LKinfo<- LKrigSetup( x, alpha=c( 1, 1,1), NC=4, NC.buffer=1,  a.wght=4.5, nlevel=3, normalize=FALSE)
Q0<- LKrig.precision( LKinfo)
dim( Q0)
[1] 698 698
# Q is block diagonal
# here is how to index the different blocks
LKinfo$latticeInfo$mLevel # number of basis functions at each level
# see also LKinfo$latticeInfo$offset  to get the index for each level
zacksAlpha<- c(
rep( 1.0, LKinfo$latticeInfo$mLevel[1]),
rep( -.5, LKinfo$latticeInfo$mLevel[2]),
rep(  .25,LKinfo$latticeInfo$mLevel[3])
)
QNew<-  diag.spam( 1/ zacksAlpha )%*% Q0
# check
plot( diag( Q0), diag( QNew))
diag( Q0)
diag( QNew)
temp<-diag( Q0) / diag( QNew)
temp
library( LatticeKrig)
help( "LatticeKrig")
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
LatticeKrig( x,y, NC.buffer=0)
LatticeKrig( x,y, NC= 5, nlevel=3,NC.buffer=0)
LatticeKrig( x,y, NC= 5, nlevel=3,NC.buffer=0)-> obj
obj$LKinfo
LKinfo<- LKrigSetup( x, NC=5, NC.buffer=0, nlevel=3, nu=1, a.wght=4.01)
LKrig.precision( LKinfo)-> look
dim( look)
image.plot( as.matrix( look))
quartz()
image.plot( as.matrix( look))
library( help=LatticeKrig)
getenv
help( getEnvironment)
210/15
library( fields)
obj<- Tps( ozone2$lon.lat, ozone2$y[16,])
data( ozone2)
obj<- Tps( ozone2$lon.lat, ozone2$y[16,])
help( do.call)
call( "mean", x= 1.0, na.rm=FALSE)
look<- call( "mean", x= 1.0, na.rm=FALSE)
eval( look)
library( LatticeKrig)
help( "LatticeKrig")
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
predict( obj)
source('~/Home/Projects/LKrigAnalysis/JoshTiming/clean_predict3.R', echo=TRUE)
predict3.LKrig( obj)
predict3.LKrig( obj, xnew=obj$x)
system.time(  out<- predict( obj, xnew=obj$x))
system.time(  out<- predict3.LKrig( obj, xnew=obj$x))
system.time(  out<- predictSE( obj, xnew=obj$x))
system.time(  out2<- predictSE( obj, xnew=obj$x))
out$mspe
system.time(  out<- predict3.LKrig( obj, xnew=obj$x))
out$mspe
help( "crossprod")
chol2inv()
source('~/Home/Projects/LKrigAnalysis/JoshTiming/predictTest.R', echo=TRUE)
predictTest(obj)
ls()
source('~/Home/Projects/LKrigAnalysis/JoshTiming/predictTest.R', echo=TRUE)
predictTest(obj)
predictTest(obj, obj$x)
source('~/Home/Projects/LKrigAnalysis/JoshTiming/predictTest.R', echo=TRUE)
predictTest(obj, obj$x)
system.time( predict( obj))
source('~/Home/Projects/LKrigAnalysis/JoshTiming/predictTest.R', echo=TRUE)
system.time( predictTest( obj))
system.time( predict( obj))
args( predict.LKrig)
predict.LKrig)
predict.LKrig
LKrig
names( obj)
obj$timingLKrig
library(fields)
source('~/Home/Src/fields/R/test.for.zero.R', echo=TRUE)
ls()
test.for.zero( 4,4)
test.for.zero( 4,4.1)
source('~/Home/Src/fields/R/test.for.zero.R', echo=TRUE)
library( fields)
help( test.for.zero)
test.for.zero( 1.2,1.3)
test.for.zero( 1.2,1.2)
test.for.zero( 1.2,1.2, tol=1e-15)
test.for.zero.flag<- 1
test.for.zero( 1.2,1.3)
source('~/Home/Src/fields/R/test.for.zero.R', echo=TRUE)
test.for.zero( 1.2,1.3)
install.packages("spam")
library( fields)
n<- 50
x<- matrix( runif(n*2), n, 2)
A<- exp.cov( x,x,theta=.2)
A<- Exp.cov( x,x,theta=.2)
image.plot( A)
n<- 50
x<- matrix( runif(n*2), n, 2)
A<- Exp.cov( x,x,theta=.2)
B<- Exp.cov( x,x, theta=.5)
fields.diagonalize(A,B)-> look
fields.diagonalize2(A,B, verbose=FALSE)-> look2
test.for.zero( look$D, look2$D, tol=6E-8,tag="eigenvalues of both versions")
source('~/Home/Src/fields/R/test.for.zero.R', echo=TRUE)
test.for.zero( look$D, look2$D, tol=6E-8,tag="eigenvalues of both versions")
G1<- look$G
G2<-look2$G
a1<- sign( G1[1,])
a2<- sign(G2[1,])
a<- a1*a2
lambda<- .8
test.for.zero( solve( A + lambda* B), G2%*%diag( 1/(1+ lambda*look2$D))%*%t(G2), tag="inverse A+lambda*B" )
test.for.zero( solve( A + lambda* B), G1%*%diag( 1/(1+ lambda*look$D))%*%t(G1), tag="inverse A+lambda*B" )
test.for.zero( G2%*%diag( 1/(1+ lambda*look2$D))%*%t(G2) ,
G1%*%diag( 1/(1+ lambda*look$D))%*%t(G1), tag="inverse A+lambda*B" )
source('~/Home/Src/fields/tests/diagonal2.test.R', echo=TRUE)
options(echo=FALSE)
source('~/Home/Src/fields/tests/diagonal2.test.R', echo=TRUE)
help( test.for.zero)
test.for.zero( 1:10, 1:10 + 1e-10, tag="First test")
test.for.zero( 1:10, 1:10 + 1e-10, tag="First test", tol=1e-12)
remove( test.for.zero.flag)
test.for.zero( 1:10, 1:10 + 1e-10, tag="First test", tol=1e-12)
test.for.zero.flag <- 1
> test.for.zero( 1:10, 1:10 + 1e-10, tag="First test", tol=1e-12)
test.for.zero( 1:10, 1:10 + 1e-10, tag="First test", tol=1e-12)
source("/Users/nychka/Home/Src/LatticeKrig/man/LKrigInternal.Rd")
q()
library( rmarkdown)
help( rmarkdown)
render("input.Rmd")
render("~/Untitled.Rmd")
8/2.54
temp<- mean(1:10)
print( temp)
library( dataWorkshop)
help( "dataWorkshop")
BoulderDaily
data( BoulderDaily)
BoulderDaily[1,]
data(A4)
BoulderDaily[1:10,]
BoulderDaily[,5]
BoulderDaily[1:1000,5]
stats( BoulderDaily$precip )
library( knitr)
help( "knit")
library(fields)
data(ozone2)
x<- ozone2$lon.lat
y<- ozone2$y[16,]
y
X<- c( 2,3,20)
X
library( LatticeKrig)
which.max.image
source("LKDistSimple.R")
X2 <- X
X<- c( 2,3,20)
# now recheck workspace
ls()
remove( list=ls())
X<- c( 2,3,20)
# now recheck workspace
ls()
"X2" <- X
ls()
X2
X3<- c( 3,4,5)
log( exp(2))
x<- 1:100
# hundred values between 0 and 2*pi
x<-  2* pi * (x/100)
y<- sin( x)
plot( x,y)
args( seq)
args( seq.default)
help( "data")
data()
data(LakeHuron)
ls()
LakeHuron
data(Titanic)
ls()
Titanic
mean(LakeHuron)
median(LakeHuron)
library( dataWorkshop)
BoulderJuneTemperature
data(BoulderJuneTemperature)
BoulderJuneTemperature
save(BoulderJuneTemperature, file="BT.rda")
# load a data set
data( "BT.rda")
# how do we see what happened?
# copy just temperatures
BT<- BoulderJuneTemperature$Temp
# How would you convert temperatures to centigrade?
# first 10 values
BT[1:10]
# an indicator for all values over 70
hold<- BT$Temp > 70
hold
# the years with values over 70
BT$Year[ hold]
# Q How many years exceed 70 degrees?
#Q What is the first year the the temperature was above 70?
# working with BT as a matrix (or table)
dim( BT)
# This is the first row and first column
BT[1,1]
# first row
BT[1,]
# first column
BT[,1]
# second column
BT[,2]
# rows 10 through 20
BT[10:20,]
#Q Plot the June temperatures by year
# working with these data as a matrix (or table)
BAll<- BoulderJuneTemperatures
dim( BAll)
# This is the first row and first column
BAll[1,1]
# first row
BAll[1,]
# first column
BAll[,1]
# second column
BAll[,2]
# rows 10 through 20
BAll[10:20,]
#Q Plot the June temperatures by year
BAll<- BoulderJuneTemperature
# working with these data as a matrix (or table)
BAll<- BoulderJuneTemperatures
dim( BAll)
# This is the first row and first column
BAll[1,1]
# first row
BAll[1,]
# first column
BAll[,1]
# second column
BAll[,2]
# rows 10 through 20
BAll[10:20,]
#Q Plot the June temperatures by year
# load a data set
data( "BT.rda")
# how do we see what happened?
# copy just temperatures
BT<- BoulderJuneTemperature$Temp
# How would you convert temperatures to centigrade?
# first 10 values
BT[1:10]
# an indicator for all values over 70
hold<- BT$Temp > 70
hold
# the years with values over 70
BT$Year[ hold]
# Q How many years exceed 70 degrees?
#Q What is the first year the the temperature was above 70?
# working with these data as a matrix (or table)
BAll<- BoulderJuneTemperature
dim( BAll)
# This is the first row and first column
BAll[1,1]
# first row
BAll[1,]
# first column
BAll[,1]
# second column
BAll[,2]
# rows 10 through 20
BAll[10:20,]
#Q What is the diffence between  BT[hold] and BAll[hold,]
#Q Plot the June temperatures by year
BAll[,"Temp"]
BAll[1:10,"Temp"]
BAll[,"Year"]
# load a data set
data( "BT.rda")
# how do we see what happened?
# copy for easy typing
BT  <- BoulderJuneTemperature$Temp
BAll<- BoulderJuneTemperature
# How would you convert temperatures to centigrade?
# first 10 values
BT[1:10]
# an indicator for all values over 70
ind70<- BT > 70
ind70
# temperatures with values over 70
BT[ind70]
# the years with values over 70
BAll$Year[ ind70]
# Q How many years exceed 70 degrees?
#Q What is the first year the the temperature was above 70?
# working with these data as a matrix (or table)
dim( BAll)
# This is the first row and first column
BAll[1,1]
# first row
BAll[1,]
# first column
BAll[,1]
# column with Year
BAll[,"Year"]
# second column
BAll[,2]
# rows 10 through 20
BAll[10:20,]
#Q What is the diffence between  BT[hold] and BAll[hold,]
#Q Plot the June temperatures by year
plot( BAll)
load("BT.rda")
BT75<-  quantile( BT,.75)
BT75
MyIQR<- function( y)
{
IQR<- quantile(y, .75, na.rm=TRUE) - quantile( y, .25,  na.rm=TRUE)
return(IQR)
}
MyIQR( runif(1000))
BT
help( "quantile")
BT75<-  quantile( BT,.75, names=FALSE)
BT75
MyIQR <- function(y){
IQR<- quantile( y, .75, na.rm=TRUE, names=FALSE) -
quantile( y, .25, na.rm=TRUE, names=FALSE)
return( IQR)
}
MyIQR(BT)
for( k in 1:100)  { print(MyIQR( runif( 100)))}
load("BT.rda")
# finding the inter quartile range:
BT<-BoulderJuneTemperature$Temp
# 75% quantile
BT75<-  quantile( BT,.75)
#Q Find the interquartile range   75% - 25% quantiles
# functions can have many optional arguments
# suppose there is an additional value that  is missing
# missing values in R are NA and occur often in data.
test<- c( BT,NA)
#Q find the 75 quantile
#Q turn off the label of 75% on the value
# building your own function
MyIQR <- function(y){
IQR<- quantile( y, .75, names=FALSE) -
quantile( y, .25,  names=FALSE)
return( IQR)
}
MyIQR(BT)
#Q
args( plot.default)
load( "BT.rda")
BT<-BoulderJuneTemperature
###################################
#  Histograms and adding lines
###################################
#histogram of the temperatures
hist( BT$Temp)
# add a better label
hist(BT$Temp, xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# more classes
hist(BT$Temp, nclass=16,
xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# locate the mean with a red vertical line
Bmean<- mean(BT$Temp, na.rm=TRUE)
abline( v=Bmean, col="red", lwd=4)
load( "BT.rda")
BT<-BoulderJuneTemperature
###################################
#  Histograms and adding lines
###################################
#histogram of the temperatures
hist( BT$Temp)
# add a better label
hist(BT$Temp, xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# more classes
hist(BT$Temp, nclass=16,
xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# locate the mean with a red vertical line
Bmean<- mean(BT$Temp, na.rm=TRUE)
abline( v=Bmean, col="red", lwd=4)
plot( BT$Year, BT$Temp)
plot( BT$Year, BT$Temp, cex=.5)
plot( BT$Year, BT$Temp, type="l")
plot( BT$Year, BT$Temp, type="l", xlab="Year", ylab="Temperature (F)")
title("Boulder mean June Temperatures")
abline( h= 70)
colors()
data()
data( morley)
morley
load("WorldBankCO2")
load("~/Home/Teaching/RDataAnalysis/CourseContent/Week1/WorldBankCO2.rda")
WorldBank
WorldBankCO2
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey")
# fitting a smooth statistical curve through the data
fit<- sreg( x,y)
lines( fit$predicted, col="orange4")
load("WorldBankCO2")
WB<- WorldBankCO2
#Q how do you look at the first row on these data?
#Q make a scatterplot of GDP.cap and CO2.cap
#     (wealth of country verses the amoutn of CO2 emitted)
#Q Fix this plot by log transformations
# where we ar going
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey")
# fitting a smooth statistical curve through the data
fit<- sreg( x,y)
lines( fit$predicted, col="orange4")
lines( fit$predicted, col="orange4", lwd=4)
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
# fitting a smooth statistical curve through the data
fit<- sreg( x,y)
lines( fit$predicted, col="orange4", lwd=4)
# read the Boulder data  for in again
load( "BT.rda")
BT<-BoulderJuneTemperature
##########################
# a scatterplot ( also a time series plot)
plot( BT$Year, BT$Temp)
# changing size of  plotting symbol  e.g. .5= half size 2= twice size
plot( BT$Year, BT$Temp, cex=.5)
# broken lines
plot( BT$Year, BT$Temp, type="l")
# good plots should have labels
plot( BT$Year, BT$Temp, type="l", xlab="Year", ylab="Temperature (F)")
title("Boulder mean June Temperatures")
#line at 70 degrees
abline( h= 70)
# Q add a line at the mean of these temperatures
# Q add the line and make it blue
###################################
#  Histograms and adding lines
###################################
#histogram of the temperatures
hist( BT$Temp)
# add a better label
hist(BT$Temp, xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# more classes
hist(BT$Temp, nclass=16,
xlab="Degrees F", main="Boulder average June Temperatures 1897-2012")
# locate the mean with a red vertical line
Bmean<- mean(BT$Temp)
abline( v=Bmean, col="red", lwd=4)
# WorldBank data on CO2 emissions per capita
load("WorldBankCO2")
WB<- WorldBankCO2
#Q how do you look at the first row on these data?
#Q make a scatterplot of GDP.cap and CO2.cap
#     (wealth of country verses the amoutn of CO2 emitted)
#Q Fix this plot by log transformations
# where we are going ...
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
# fitting a smooth statistical curve through the data
fit<- sreg( x,y)
lines( fit$predicted, col="orange4", lwd=4)
load("WorldBankCO2.rda")
library(dataWorkshop)
data(AudiA4)
plot( AudiA4[,3]/1000, AudiA4[,2],pch=16,
ylab="Asking Price", xlab="Mileage (thousands)")
plot( AudiA4[,3]/1000, AudiA4[,2],pch=16,cex=.5
ylab="Asking Price", xlab="Mileage (thousands)")
plot( AudiA4[,3]/1000, AudiA4[,2],pch=16, cex=.5,
ylab="Asking Price", xlab="Mileage (thousands)")
setwd("~/")
setwd("~/Home/Teaching/RDataAnalysis/Week1")
load( "BT.rda")
BT
