x<- x[good,]
y<- y[good]
N<- length(y)
set.seed(243)
weights<- runif(N)*10
#x<- transformx(x, "range")
N<- length( y)
alpha<- c(1,.5,.5)
nlevel<-3
a.wght<-  c(5,5,10)
lambda <- .8
obj<- LKrig( x,y,weights=weights,NC=15, lambda=lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, return.cholesky=TRUE)
obj2<- LKrig( x,y,weights=weights,NC=15, lambda=2*lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, use.cholesky=obj$Mc)
obj3<-  LKrig( x,y,weights=weights,NC=15, lambda=2*lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, return.cholesky=TRUE)
test.for.zero( obj3$c.coef, obj2$c.coef, tag="test of LatticeKrig.coef c")
test.for.zero( obj3$d.coef, obj2$d.coef, tag="test of LatticeKrig.coef d")
Q<- LKrig.precision(obj3$LKinfo)
look2<-LKrig.lnPlikeOLD(obj3$Mc,Q,sqrt(weights)*y, obj3$residuals,
weights, obj3$LKinfo)
look2
sqrt(weights)*y
obj3$residuals
obj3$LKinfo
look2<-LKrig.lnPlike(obj3$Mc,Q, obj3$quad.form, nObs=N, nReps=1, weights, LKinfo)
test.for.zero( look2$lnProfileLike, obj3$lnProfileLike)
obj3$lnProfileLike
obj$lnProfileLike
obj2$lnProfileLike
obj<- LKrig( x,y,weights=weights,NC=15, lambda=lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, return.cholesky=TRUE)
obj2<- LKrig( x,y,weights=weights,NC=15, lambda=2*lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, use.cholesky=obj$Mc)
obj$lambda.fixed
obj$lambda.fixed
obj2$lambda.fixed
summary( obj)
q()
obj
obj2
obj3<-  LKrig( x,y,weights=weights,NC=15, lambda=2*lambda,alpha=alpha,
nlevel=nlevel,a.wght=a.wght, return.cholesky=FALSE)
test.for.zero( obj3$c.coef, obj2$c.coef,
tag="reuse Mc test of LatticeKrig.coef c")
test.for.zero( obj3$d.coef, obj2$d.coef,
tag="reuse Mctest of LatticeKrig.coef d")
test.for.zero( obj2$lnProfileLike, obj3$lnProfileLike,
tag="reuse Mc test of lnProfileLike")
ls()
prompt( LKrig)
help( "pairs")
set.seed( 123)
# the power of multiple regression
X1<- rnorm(100)
X2<- rnorm( 100)
X3<- rnorm( 100)
# Y is perfectly predictable if you know X1,X2, X3
Y<- X1 + 2*X2 -.5*X3
testData<- data.frame( X1, X2, X3, Y)
pairs( testData)
set.seed( 123)
# the power of multiple regression
X1<- rnorm(100)
X2<- rnorm( 100)
X3<- rnorm( 100)
# Y is perfectly predictable if you know X1,X2, X3
Y<- X1 + 1.2*X2 -.5*X3
testData<- data.frame( X1, X2, X3, Y)
pairs( testData)
summary( lm(Y ~ X1))
plot( X2, fit1$residuals)
fit1<- lm( Y~ X1)
summary( fit1)
plot( X2, fit1$residuals)
set.panel( 1,2)
plot( X2, fit1$residuals)
plot( X3, fit1$residuals)
library( fields)
set.panel( 1,2)
plot( X2, fit1$residuals)
plot( X3, fit1$residuals)
fit2<- lm( Y~ X1 + X2)
summary( fit2)
plot( X3, fit2$residuals)
set.seed( 123)
# the power of multiple regression
X1<- rnorm(20)
X2<- rnorm( 20)
X3<- rnorm( 20)
# Y is perfectly predictable if you know X1,X2, X3
Y<- X1 + 1.2*X2 -.5*X3
testData<- data.frame( X1, X2, X3, Y)
# all pairwise scatter plots
pairs( testData)
fit1<- lm( Y~ X1)
summary( fit1)
set.panel( 1,2)
plot( X2, fit1$residuals)
plot( X3, fit1$residuals)
fit2<- lm( Y~ X1 + X2)
plot( X3, fit2$residuals)
fit3<- lm( Y ~ X1 +X2 +X3)
summary( fit3)
X1<- rnorm(20)
X2<- rnorm( 20)
X3<- rnorm( 20)
# Y is  almost perfectly predictable if you know X1,X2, X3
Y<- X1 + 1.2*X2 -.5*X3 + .01*rnorm(20)
testData<- data.frame( X1, X2, X3, Y)
# all pairwise scatter plots
pairs( testData)
fit1<- lm( Y~ X1)
summary( fit1)
set.panel( 1,2)
plot( X2, fit1$residuals)
plot( X3, fit1$residuals)
fit2<- lm( Y~ X1 + X2)
plot( X3, fit2$residuals)
fit3<- lm( Y ~ X1 + X2 + X3)
summary( fit3)
fit1<- lm( Y~ X1)
summary( fit1)
set.seed( 123)
# the power of multiple regression
X1<- rnorm(20)
X2<- rnorm( 20)
X3<- rnorm( 20)
# Y is  almost perfectly predictable if you know X1,X2, X3
Y<- X1 + 1.2*X2 -.5*X3 + .01*rnorm(20)
testData<- data.frame( X1, X2, X3, Y)
pairs( testData)
fit1<- lm( Y~ X1)
summary( fit1)
source('~/Home/Teaching/APPM2720/Week8/multipleLS.R', echo=TRUE)
source('~/Home/Teaching/APPM2720/Week8/multipleLS.R', echo=TRUE)
args( lm)
help( pnorm)
M<- 95
pnorm( (1- .5*(M/100) ), lower.tail=FALSE)
qnorm( (1- .5*(M/100) ), lower.tail=FALSE)
qnorm( .975)
qnorm( .025, lowre.tail=FALSE)
qnorm( .025, lower.tail=FALSE)
qnorm( .5* (1- M/100), lower.tail=FALSE)
qnorm( .5* (1- M/100), lower.tail=FALSE)
M<- 99
qnorm( .5* (1- M/100), lower.tail=FALSE)
help( predict.lm)
fitA4<- lm( price ~ year + mileage + distance, data=AudiA4)
usedCar<- data.frame( mileage = 50000, year =2014,  distance =0)
predict( fitA4, newdata=usedCar)
predict( fitA4, newdata=usedCar, interval="prediction")
predict( fitA4, newdata=usedCar, se.fit=TRUE)
predict( fitA4, newdata=usedCar, interval="prediction")
(22770.74 - 34681.6)/1.96
sqrt(373^2 + 3005^2)
(22770.74 - 34681.6)/1.96/2
SE<- predict( fitA4, newdata=usedCar, se.fit=TRUE)
SE.prediction<- sqrt( (SE$se.fit)^2 + (SE$residual.scale)^2 )
SE.prediction
(22770.74 - 34681.6)/1.96/2
fitA4quad<- lm( price ~ year + I(year^2) + mileage + I(mileage^2), data=AudiA4)
SE2<- predict( fitA4quad, newdata=usedCar, se.fit=TRUE)
SE2
SE<- predict( fitA4, newdata=usedCar, se.fit=TRUE)
SE
set.seed( 123)
# the power of multiple regression
X1<- rnorm(20)
X2<- rnorm( 20)
# Y is  almost perfectly predictable if you know X1,X2, X3
Y<- X1 + 1.2*X2 -.5*X3 + .01*rnorm(20)
testData<- data.frame( X1, X2,  Y)
# all pairwise scatter plots
pairs( testData)
fit1<- lm( Y~ X1)
summary( fit1)
set.panel( 1,2)
plot( X2, fit1$residuals)
fit2<- lm( Y~ X1 + X2)
plot( fit2)
AudiA4[1,]
data( AudiA4)
pairs(AudiA4[,1:6])
N<- nrow( AudiA4)
N
N<- nrow( AudiA4)
set.seed( 223)
sub<- sample(1:N, N*.9, replace=FALSE )
sub
N<- nrow( AudiA4)
set.seed( 223)
sub<- sample(1:N, N*.9, replace=FALSE )
subData<- AudiA4[sub,]
fit1<- lm( price ~ year + mileage + I( mileage^2) +I(year^2), data=subData)
N<- nrow( AudiA4)
set.seed( 223)
sub<- sample(1:N, N*.9, replace=FALSE )
subData<- AudiA4[sub,]
fitSub<- lm( price ~ year + mileage + I( mileage^2) +I(year^2), data=subData)
# the data NOT as the subset
outData<- AudiA4[-sub,]
pred<- predict( fitSub,outData )
plot( pred, outData$price)
abline( 0,1)
sd(  pred -outData$price)
fit1$sigma
summary( fitSub)
source('~/Home/Teaching/APPM2720/Week8/multipleLS.R', echo=TRUE)
source('~/Home/Teaching/APPM2720/Week8/multipleLS.R', echo=TRUE)
quilt.plot( AudiA4[,c("year", "mileage")] , AudiA4$price)
set.panel()
quilt.plot( AudiA4[,c("year", "mileage")] , AudiA4$price)
quartz()
quilt.plot( AudiA4[,c("year", "mileage")] , AudiA4$price)
quilt.plot( AudiA4[,c("year", "mileage")] , fit0$residuals)
library( dataWOrkshop)
library( dataWorkshop)
data()
data("WorldBankCO2")
help( WorldBankCO2)
plot( WorldBankCO2[,"GDP.cap"], WorldBankCO2[,"CO2.cap"], log="xy")
plot( WorldBankCO2[,"GDP.cap"], WorldBankCO2[,"CO2.cap"], log="x")
plot( WorldBankCO2[,"GDP.cap"], WorldBankCO2[,"CO2.cap"], log="y")
WB<- WorldBankCO2
WB[1,]
ls()
remove( list=ls())
library( dataWorkshop)
data( AudiA4)
x<- cbind( AudiA4$mileage,AudiA4$year )
obj<- Tps(cbind( AudiA4$mileage,AudiA4$year ), AudiA4$price )
surface( obj)
sd( obj$resdiuals)
sd( obj$residuals)
args( scan)
help( scan)
library( dataWorkshop)
data()
help( YSUsers)
data(YSUsers)
YSUsers[1,]
plot( YSUsers$queue_wait_time ~ YSUsers$num_cores_used)
plot( YSUsers$queue_wait_time ~ YSUsers$num_cores_used, log="y")
plot( YSUsers$queue_wait_time ~ YSUsers$num_cores_used, log="y", log="x")
plot( YSUsers$queue_wait_time ~ YSUsers$num_cores_used, log="xy")
wallTime<- YSUsers[,"end_time"] - YSUsers[,"start_time"]
cores<- YSUsers[,"num_nodes_used"] * 16
plot( wallTime, cores, log="xy", xlab="Time running", ylab="Number of cores")
boxplot(wallTime ~ as.factor( cores))
boxplot(wallTime ~ as.factor( cores), log="xy")
boxplot(wallTime ~ as.factor( cores), log="y")
names( YSUsers)
library( dataWorkshop)
data( AduiA4)
data( AudiA4)
AudiA4[1,]
AudiA4$engine
ls(0)
ls()
ind<- AudiA4$engine =="NEWLY"
ind
ind<- which(AudiA4$engine =="NEWLY")
ind
getCar( ind)
getCar( ind[1])
getCar( 309)
getCar( ind[2])
ind<- which(AudiA4$engine =="Prestige")
ind
getCar(ind[1])
engine<- AudiA4$engine
table( engine)
is.numeric( engine)
is.factor( engine)
as.list( engine)
as.numeric( engine)
which (engine >2)
which (as.numeric(engine) >2)
is.numeric( AudiA4$engine)
is.numeric( AudiA4$engine)
is.character( AudiA4$engine)
is.factor( AudiA4$engine)
var1<- c( "red", "blue", "red", "green", "blue", "blue", NA)
var1F<- as.factor(var1)
var1F
va1
var1
var1<- c( "red", "blue", "red", "green", "blue", "blue", NA)
print(var1)
var1F<- as.factor(var1)
print( var1F)
look<- as.numeric( var1F)
print(look)
table( var1)
table( var1F)
levels<- unique( var1)
print( levels)
index2<- match( var1, levels)
print( index2)
args( unique)
help( "unique")
levels<- levels[-4]
levels<- unique( var1)
print( levels)
index2<- match( var1, levels)
print( index2)
levels<- levels[-4]
index2<- match( var1, levels)
index2
lm( price ~ engine, data=AudiA4 )
table( AudiA4$engine)
# Oops! Some of these are not engines.
AudiA4$engineNew<- AudiA4$engine
AudiA4$engineNew[ "Prestige" == AudiA4$engine] <- NA
AudiA4$engineNew[ "NEWLY" == AudiA4$engine] <- NA
table( AudiA4$engine)
1.8T     2.0T      3.0    NEWLY Prestige       SE
51      305        1        2        2        1
# Oops! Some of these are not engines.
AudiA4$engineNew<- AudiA4$engine
ind<- match( AudiA4$engine, c("NEWLY", "Prestige", "SE")
AudiA4$engineNew[ ind] <- NA
table( AudiA4$engineNew)
ind<- match( AudiA4$engine, c("NEWLY", "Prestige", "SE"))
AudiA4$engineNew[ ind] <- NA
table( AudiA4$engineNew)
ind
levels( engineNew<- AudiA4$engine)
engineNew<- AudiA4$engine
ind<- match( engineNew, levels(engineNEW)[3:5] )
ind<- match( engineNew, levels(engineNew)[3:5] )
ind
engineNew<- AudiA4$engine
ind<- as.numeric(engineNew) >= 3
AudiA4$engineNew[ ind] <- NA
table( AudiA4$engineNew)
table( AudiA4$engine)
1.8T     2.0T      3.0    NEWLY Prestige       SE
51      305        1        2        2        1
# Oops! Some of these are not engines and can not
# handle just one dat point for 3.0
engineNew<- AudiA4$engine
ind<- as.numeric(engineNew) >= 3
engineNew[ ind] <- NA
table( AudiA4$engineNew)
table(engineNew)
engineNew<- AudiA4$engine
ind<- as.numeric(engineNew) >= 3
engineNew[ ind] <- NA
engineNew <- as.factor( engineNew)
table( engineNew)
engineNew0<-  as.numeric(AudiA4$engine)
ind<- engineNew) >= 3
engineNew0[ ind] <- NA
levelsNew<- levels(AudiA4$engine)[1:2]
engineNew <- as.factor( engineNew0, levelsNew)
table(engineNew)
engineNew0<-  as.numeric(AudiA4$engine)
ind<- engineNew  >= 3
engineNew0[ ind] <- NA
engineNew0<-  as.numeric(AudiA4$engine)
ind<- engineNew0  >= 3
engineNew0[ ind] <- NA
levelsNew<- levels(AudiA4$engine)[1:2]
engineNew <- as.factor( engineNew0, levelsNew)
help( as.factor)
levelsNew
engineNew0<-  as.character(AudiA4$engine)
ind<- as.numeric(AudiA4$engine)
engineNew0[ ind >= 3] <- NA
engineNew <- as.factor( engineNew0)
table(engineNew)
lm( price ~ engineNew, data=AudiA4 )
summary( lm( price ~ engineNew, data=AudiA4 ))
predict(  lm( price ~ engineNew, data=AudiA4 ))[1:10]
unique( predict(  lm( price ~ engineNew, data=AudiA4 )))
unique( predict(  lm( price ~ engineNew, data=AudiA4 )))
(7339 + 15403)
lm( price ~ year + mileage + engineNew, data=AudiA4 )
summary(lm( price ~ year + mileage + engineNew, data=AudiA4 ))
out<- (lm( price ~ year + mileage + engineNew, data=AudiA4 ))
plot( out)
hist( AUdiA4$distance)
hist( AudiA4$distance)
distF<- as.factor( ( AudiA4$distance <= 250) )
lm( price ~ year + mileage + distF, data=AudiA4 )
distF<- as.factor( ( AudiA4$distance <= 250) )
lm( price ~ I(year-mean(year))  + mileage + distF, data=AudiA4 )
lm( price ~ I(year- mean(year))  + mileage + distF, data=AudiA4 )
min( year)
min( AudiA4$year)
lm( price ~ I(year - 1999)  + mileage + distF, data=AudiA4 )
library( LatticeKrig)
LKrigSetup
ls(pos=2)
setwd("~/Home/Teaching/APPM2720/Week9")
Bolder<-  read.table( "BB200.txt", header=TRUE, skip=2)
convertTime<- function(tt){
tt <- as.character(tt)
m<- nchar( tt)
mn<- substr(tt,1, m-3)
sec<- substr(tt,m-1,m)
mn<- as.numeric( mn)
sec<- as.numeric( sec)
return( mn + sec/60)
}
BoulderN<- Bolder
for(  k in (6:13) ){
BolderN[,k]<- convertTime(BolderN[,k])
}
BolderN<- Bolder
for(  k in (6:13) ){
BolderN[,k]<- convertTime(BolderN[,k])
}
BolderN
BBoulder<- BolderN
save(BBoulder, file="BBoulder")
remove( list=ls())
library( fields)
load("BBoulder")
BBoulder1<- na.omit( BBoulder)
BBoulder1<- na.omit( BBoulder)
FitD<- lm( PLACE~ MILE1 + I( MILE1^2)+ MILE6 + I( MILE6^2), BBoulder1)
sort( abs( FitD$residuals))
ind<- c( 66,184)
rank( abs(FitD$residuals))
order( abs(FitD$residuals))
which( max( abs( FitD$residuals)))
which( max( abs( FitD$residuals)) == abs( FitD$residuals))
max( abs( FitD$residuals))
temp<- abs( FitD$residuals)
max( temp)
which.max( temp)
plot(BBoulder1$MILE6, temp )
temp[184]
temp[167]
BBoulder1<- na.omit( BBoulder)
FitD<- lm( PLACE~ MILE1 + I( MILE1^2)+ MILE6 + I( MILE6^2), BBoulder1)
temp<- abs( FitD$residuals)
which.max( temp)
dim( BBoulder1)
length( temp)
names( temp)<- NULL
which.max( temp)
M<- nrow( BBoulder1)
temp<- matrix( NA, ncol=7, nrow= M)
M<- nrow( BBoulder1)
temp<- matrix( NA, ncol=7, nrow= M)
for( k in 1:M){
temp[k,1:6]<- cumsum( BBoulder1[k,6:11])
}
k<- 1
cumsum( BBoulder1[k,6:11])
cumsum( c(BBoulder1[k,6:11]))
M<- nrow( BBoulder1)
temp<- matrix( NA, ncol=7, nrow= M)
for( k in 1:M){
temp[k,1:6]<- cumsum( c(BBoulder1[k,6:11]) )
}
temp[,7]<- BBoulder1[,13]
matplot( t( temp))
race <- t( temp)
boxplot( race)
boxplot( t(race))
svd( temp)$d
svd( temp)$v[,2]
svd( temp)$v[,1]
plot( svd( temp)$u[,1:2])
sqrt(cumsum(svd( temp)$d^2 ))
plot( c( 1:6, 6.2), race, type="l", col="blue")
dim( race)
matplot( c( 1:6, 6.2), race, type="l", col="blue")
race0<- race - matrix( race[,1], ncol=182, nrow=7)
matplot( c( 1:6, 6.2), race0, type="l", col="blue")
matplot( c( 1:6, 6.2), race0, type="l", col="blue")
matlines( c( 1:6, 6.2),race0[,ind], col="red" )
ind
dim( race0)
race0[,ind]
dim( race0)
args( order)
order( hold, decreasing=FALSE)[1:4]
hold<- abs(FitD$residuals)
order( hold, decreasing=FALSE)[1:4]
order( hold)
order( hold, decreasing=TRUE)[1:4]
hold<- abs(FitD$residuals)
ind<- order( hold, decreasing=TRUE)[1:4]
matplot( c( 1:6, 6.2), race0, type="l", col="blue")
matlines( c( 1:6, 6.2),race0[,ind], col="red" )
matplot( c( 1:6, 6.2), race0, type="l", col="blue", lty=1)
matlines( c( 1:6, 6.2),race0[,ind], col="red" , lwd=3)
temp2<- temp/temp[,7]
matplot( c( 1:6, 6.2), race2, type="l", col="blue", lty=1)
matlines( c( 1:6, 6.2),race2[,ind], col="red" , lwd=3)
temp[,7]<- BBoulder1[,13]
temp2<- temp/temp[,7]
race <- t( temp)
race2 <- t( temp2)
matplot( c( 1:6, 6.2), race, type="l", col="blue")
race0<- race - matrix( race[,1], ncol=182, nrow=7)
matplot( c( 1:6, 6.2), race0, type="l", col="blue", lty=1)
matlines( c( 1:6, 6.2),race0[,ind], col="red" , lwd=3)
matplot( c( 1:6, 6.2), race2, type="l", col="blue", lty=1)
matlines( c( 1:6, 6.2),race2[,ind], col="red" , lwd=3)
temp2<- temp- matrix( c(1:6, 6.2), nrow=M, ncol=7)*BBoulder1[,12]
race2 <- t( temp2)
matplot( c( 1:6, 6.2), race2, type="l", col="blue", lty=1)
matlines( c( 1:6, 6.2),race2[,ind], col="red" , lwd=3)
