# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.01,
nlevel=3, alpha=c(1.0,.25,.25^2),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.01,
nlevel=3, alpha=c(1.0,.25,.25^2), overlap=3.0,
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKinfo$LatticeInfo$grid[[1]], col="magenta")
points( LKinfoBad$LatticeInfo$grid[[1]], col="magenta")
plot( LKinfoBad$LatticeInfo$grid[[1]], col="magenta")
points( LKrigLatticeCenters(LKinfoBad,1), col="magenta")
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters(LKinfoBad,1), col="magenta")
points( LKrigLatticeCenters(LKinfoBad,2), col="magenta", pch=".")
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.01,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=4, LKGeometry="LKSphere", a.wght=6.005,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.01,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.001,
nlevel=3, alpha=c(1.0,.25,.25^2), overlap=3.0,
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.001,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=4, LKGeometry="LKSphere", a.wght=6.1,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoGood
LKinfoBad
library( fields)
ls(pos=2)
MLESpatialProcess
library( LatticeKrig)
test.for.zero.flag<- 1
data( ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
range(x[,1])
range(x[,2])
xTest<- rbind(x, c( -100,20)
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
xTest<- rbind(x, x)
yTest<- c( y, y)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
20 + 10 + 10 + 8 + 10 + 4 + 10 + 7
20 + 10 + 10 + 10 + 10 + 4 + 10 + 7
20 +10 + 10 +10 +10 +4 +10 +7
20 + 8 + 15 + 15 + 10 + 4 + 10 + 10
qnorm( .25)
-qnorm( .25)*2
setwd("~/Home/Teaching/APPM2720/Week11")
source('~/Home/Teaching/APPM2720/Week11/ROCCurves.R', echo=TRUE)
source('~/Home/Teaching/APPM2720/Week11/ROCCurves.R', echo=TRUE)
source('~/Home/Teaching/APPM2720/Week11/ROCCurves.R', echo=TRUE)
fitHW
fit
summary(fit)$dev
summary( fit)-> temp
temp
names( temp)
temp$deviance
for( k in 1:57){
fitHW<-  glm(spam~dat[,k+1],
family=binomial,
subset=train)
print( fitHW$deviance)
}
for( k in 1:57){
y<- dat[train,1]
x<- dat[,k+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
for( k in 1:57){
y<- dat[train,1]
x<- dat[train,k+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
warnings()
for( k in 1:57){
y<- dat[train,1]
x<- dat[train,(1:k)+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
for( k in 2:57){
y<- dat[train,1]
x<- dat[train,(1:k)+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
for( k in 2:57){
y<- dat[train,1]
ind<- (1:k)
x<- dat[train,ind+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
ifelse(   TRUE,   24, 25)
ifelse(   F,   24, 25)
setwd("~/Home/Teaching/APPM2720/Week11")
dir()
load("spam.RData")
fit<- glm( spam ~ log10( capLong), data=da, family=binomial, subset=train)
fit<- glm( spam ~ log10( capLong), data=dat, family=binomial, subset=train)
fit
fit<- glm( spam ~ log10( capLong) +free , data=da, family=binomial, subset=train)
fit<- glm( spam ~ log10( capLong) +free ,
data=dat, family=binomial, subset=train)
predict( fit)
freeny
free
dat$free
fit<- glm( spam ~ log10( capLong) +free ,
data=dat, family=binomial, subset=train)
summary( fit)
1.45059  + 2*  0.09631
1.45059  - 2*  0.09631
temp<- summary( fit)
summary( fit)
temp<- summary( fit)
temp
names( temp)
temp$coefficients
temp$coefficients[3,1:2]
est<-  temp$coefficients[3,1]
SE<- temp$coefficients[3,2]
SE
est + c( -2, 2)*SE
test.spam<- predict( fit, newdata=dat[!train, ],
type="response")
test.spam
test.spam<- dat[!train,"spam"]
fit<- glm( spam ~ log10( capLong) + free ,
data=dat, family=binomial, subset=train)
test.probs<- predict( fit, newdata=dat[!train, ],
type="response")
test.spam<- dat[!train,"spam"]
plot( test.probs, test.spam)
boxplot(test.probs ~ test.spam )
test.class<- test.probs > .5
test.class
test.class<-  as.numeric(test.probs > .5)
test.class
table( test.spam, test.class)
76/ ( 37 + 76)
9/ ( 124+9)
source('~/Home/Teaching/APPM2720/Week11/ROC.point.R', echo=TRUE)
ROC.point
ROc.point( .5, fit.probs, fit.spam)
ROC.point( .5, fit.probs, fit.spam)
ROC.point( .5, test.probs, test.spam)
ROC.point( .75, test.probs, test.spam)
ROC.point( .001,test.probs, test.spam)
ROC.point( .99,test.probs, test.spam)
ROC.point( 1e-5,test.probs, test.spam)
ROC.point( 0,test.probs, test.spam)
seq.prob<- seq( 0,1,.01)
results<- ROC.point( seq.prob,
test.probs, test.spam )
results
plot( c(0,1), c(0,1), xlab="FPR", ylab="TPR")
plot( c(0,1), c(0,1), xlab="FPR", ylab="TPR")
results<- ROC.point( seq.prob,
test.probs, test.spam )
lines( results, col="red")
abline( 0,1, col="grey", lty=2)
abline( 0,1, col="grey", lty=2, lwd=2)
for( k in 2:57){
y<- dat[train,1]
ind<- (1:k)
x<- dat[train,ind+1]
fitHW<-  glm(y~ x,
family=binomial,
subset=train)
print( fitHW$deviance)
}
source('~/Home/Teaching/APPM2720/Week11/AllVar.R', echo=TRUE)
fitAll<- glm( spam ~ . ,
data=dat, family=binomial, subset=train)
test.probsAll<- predict( fitAll, newdata=dat[!train, ],
type="response")
source('~/Home/Teaching/APPM2720/Week11/AllVar.R', echo=TRUE)
