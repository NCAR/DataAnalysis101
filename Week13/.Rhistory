image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.01,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.001,
nlevel=3, alpha=c(1.0,.25,.25^2), overlap=3.0,
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.001,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=4, LKGeometry="LKSphere", a.wght=6.1,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoGood
LKinfoBad
library( fields)
ls(pos=2)
MLESpatialProcess
library( LatticeKrig)
test.for.zero.flag<- 1
data( ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
range(x[,1])
range(x[,2])
xTest<- rbind(x, c( -100,20)
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
xTest<- rbind(x, x)
yTest<- c( y, y)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
20 + 10 + 10 + 8 + 10 + 4 + 10 + 7
20 + 10 + 10 + 10 + 10 + 4 + 10 + 7
20 +10 + 10 +10 +10 +4 +10 +7
20 + 8 + 15 + 15 + 10 + 4 + 10 + 10
qnorm( .25)
-qnorm( .25)*2
20 + 10 + 15 + 12 +5 +2
citation("fields")
citation
dir <- system.file(package = fields)
dir <- system.file(package = "fields")
dir
meta <- packageDescription(pkg = package, lib.loc = dirname(dir))
meta <- packageDescription(pkg = "fields", lib.loc = dirname(dir))
meta
citfile <- file.path(dir, "CITATION")
citfile
readCitationFile(citfile, meta)
readCitationFile
citfile
citfile<- edit( citfile)
citfile
readCitationFile(citfile, meta)
library( fields)
citation("fields")
citation( ggplot2)
library( ggplot2)
citation( "ggplot2")
help( citation)
library( fields)
citation("fields")
citation("fields")
help("citHeader")
citation("fields")
citation("fields")
readCitationFile
citation("fields")
citation("fields")
citation("fields")
citation("fields")
citation( fields)
citation()
citation( fields)
citation( fields)
citation( "fields")
help( bibentry)
citation( "fields")
citation( "fields")
version( fields)
package_version(fields)
package_version("fields")
library( fields)
package_version("fields")
help( package_version)
packageVersion( fields)
packageVersion( "fields")
citation( "fields")
library( LatticeKrig)
help( LattticeKrig)
help( LatticeKrig)
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
obj
library( LatticeKrig)
help( "LatticeKrig")
Load ozone data set
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
obj
library( dataWorkshop)
data( "WorldBankCO2")
WB<- WorldBankCO2
WB<- WorldBankCO2
x<- log10( WB$GDP.cap)
y<- log10( WB$CO2.cap)
plot( x,y)
WB<- WorldBankCO2
x<- log10( WB$GDP.cap)
y<- log10( WB$CO2.cap)
x2<- x[ order(x)]
y2<- y[order(x)]
x
x2
y2
plot( x2, y2)
plot( x2, y2)
fit1<- lm( y ~ x)
lines(x2, fit1$fitted.values)
plot( x2, y2)
fit1<- lm( y ~ x)
abline( fit1$coefficents, col="red")
lines(x2, fit1$fitted.values)
plot( x2, y2)
fit1<- lm( y2 ~ x2)
abline( fit1$coefficents, col="red")
lines(x2, fit1$fitted.values)
plot( x2, y2)
fit1<- lm( y2 ~ x2)
lines(x2, fit1$fitted.values, col="green4")
fit2<- lm( y2 ~ x2 + I(x2^2))
lines(x2, fit2$fitted.values, col="green4")
fit3<- lm( y2 ~ x2 + I(x2^2) + I(x2^3))
lines(x2, fit3$fitted.values, col="green4")
lines(x2, fit3$fitted.values, col="green4", lty=2)
plot( x2, y2)
fit1<- lm( y2 ~ x2)
lines(x2, fit1$fitted.values, col="green4")
fit2<- lm( y2 ~ x2 + I(x2^2))
lines(x2, fit2$fitted.values, col="green4")
fit3<- lm( y2 ~ x2 + I(x2^2) + I(x2^3))
lines(x2, fit3$fitted.values, col="green4", lty=2)
fitSreg<- sreg( x2, y2)
summary( fitSreg)
fitSreg<- sreg( x2, y2)
lines( fitSreg$predicted, col="red4", lwd=2)
plot( x2, y2)
lines( fitSreg$predicted, col="red4", lwd=2)
xgrid<- seq( min( x2), max( x2),,200)
fHat<- predict( fitSreg, x=xgrid)
plot( x2, y2)
lines( fitSreg$predicted, col="red4", lwd=2)
xgrid<- seq( min( x2), max( x2),,200)
fHat<- predict( fitSreg, x=xgrid)
lines( xgrid, fHat, col="blue")
plot( x2, y2)
#lines( fitSreg$predicted, col="red4", lwd=2)
xgrid<- seq( min( x2), max( x2),,200)
fHat<- predict( fitSreg, x=xgrid)
lines( xgrid, fHat, col="blue")
fHatD<- predict( fitSreg, x=xgrid, derivative=1 )
lines( xgrid, fHatD, col="blue", lty=2)
par()
usrCoords<- par()$usr
usrCoords
usrCoords<- par()$usr
usrCoords[3:4]<- range(fHatD )
usrCoords
par( usr= usrCoords )
plot( x2, y2)
#lines( fitSreg$predicted, col="red4", lwd=2)
xgrid<- seq( min( x2), max( x2),,200)
fHat<- predict( fitSreg, x=xgrid)
lines( xgrid, fHat, col="blue")
fHatD<- predict( fitSreg, x=xgrid, derivative=1 )
usrCoords<- par()$usr
usrCoords[3:4]<- range(fHatD )
par( usr= usrCoords )
lines( xgrid, fHatD, col="blue", lty=2)
axis( side=4)
data(COmonthlyMet)
plot(CO.loc)
US( add=TRUE)
setwd("~/Home/Teaching/APPM2720/Week13")
library(dataWorkshop)
data(COmonthlyMet)
ls()
x<- CO.loc
y<- CO.tmin.MAM.climate
elev<- CO.elev
good<- !is.na( y)
x<- x[good,]
y<- y[good]
elev<- elev[good]
quilt.plot( x, y)
US( add=TRUE)
title("CO MAM average minimum temperatures")
fit1<- Tps( x, y)
predcitSurface( fit1)
predictSurface( fit1)
look<- predictSurface( fit1)
image.plot( look)
US( add=TRUE)
look<- predictSurfaceSE( fit1)
image.plot( look)
points( x, col="mgenta")
points( x, col="magenta")
plot( fit1)
set.panel(2,2)
plot( fit1)
plot( elev, fit1$residuals)
fields.style()
plot( elev, y, xlab="elevation", ylab="MAM minimum (C) ")
X<- cbind( x, elev)
lmObj<- lm( y ~ lon + lat + elev, data=X )
summary( lmObj)
quilt.plot( x, lmObj$residuals)
US( add=TRUE, col="grey", lwd=2)
fit2<- Tps( x, lmObj$residuals)
fit2
surface( fit2)
fit1
x<- sort(runif(200))
true<-  x*(1-x)^3
plot( x, true)
x<- sort(runif(200))
true<-  x*(1-x)^3
true<-  true/ sd( true)
sd( true)
x<- sort(runif(200))
true<-  x*(1-x)^3
true<-  true/ sd( true)
y1<- true + rnorm( 200)
sreg( x, y1)
remove( list=ls())
data(dataWorkshop)
library(dataWorkshop)
help(dataWorkshop )
library(dataWorkshop)
set.seed( 123)
x<- runif(200)
x
x<- sort( x)
x
x^(-15)
Num<- (-9/2x^(5/8) + (18/256)* x^(-15))
Den<- exp(cos( 14x))
true<- Num/Den
Num<- (-9/2x^(5/8) + (18/256)* x^(-15))
Den<- exp(cos( 14x))
true<- Num/Den
Num<- (-9/2)*x^(5/8) +
(18/256)* x^(-15))
Den<- exp(cos( 14x))
true<- Num/Den
Num<- (-9/2)*x^(5/8) +
(18/256)* x^(-15)
Den<- exp(cos( 14*x))
true<- Num/Den
plot( x, true)
dev.off()
plot( x, true)
quartz()
plot( x, true)
Num<- (-9/2)*x^(5/8) +
(18/256)* x^(4)
Den<- exp(cos( 14*x))
true<- Num/Den
plot( x,true)
true<- true/sd(true)
plot( x, true)
set.seed( 233)
y<- true + .5*norm( 200)
plot( x,y)
lines( x, true)
y
plot(x,y)
plot(x,y)
plot(x,y)
set.seed( 123)
x<- runif(200)
x<- sort( x)
# true function
Num<- (-9/2)*x^(5/8) +
(18/256)* x^(4)
Den<- exp(cos( 14*x))
true<- Num/Den
true<- true/sd(true)
set.seed( 233)
y<- true + .5*norm( 200)
plot( x, true, type="l")
y<- true + .5*rnorm( 200)
plot( x,y)
plot( x,y)
lines( x, true, col="red")
fit<- sreg( x, y)
names( fit)
lines( fit$predicted, col="brown")
lines( fit$predicted, col="magenta")
plot(x,y)
set.seed( 244)
for( k in 1:50){
y<- true + .5*rnorm( 200)
fit<- sreg( x, y)
lines( fit$predicted, col="magenta")
}
lines( x, true, col="red")
lines( x, true, col="brown", lwd=3)
plot(c(0,1),c( -7,2), type="n")
set.seed( 244)
for( k in 1:50){
y<- true + 2*rnorm( 200)
fit<- sreg( x, y)
lines( fit$predicted, col="magenta")
}
lines( x, true, col="brown", lwd=3)
y<- true + 2*rnorm( 200)
fit<- sreg( x, y)
fit
summary( fit)
summary( fit)
plot( x,y)
lines( fit$predicted)
data( VictoriaT)
help( VictoriaT)
names( VictoriaT)
quartz()
set.panel( 3,3)
for( k  in 1:9){
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
}
data( VictoriaT)
quartz()
set.panel( 3,3)
for( k  in 1:9){
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
}
names( VictoriaT)
VictoriaT$x
k<- 8
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
k<-9
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
k<-10
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
k<-100
image.plot( VictoriaT$x,VictoriaT$y,
VictoriaT$z[,,k] )
stats( c( VictoriaT$z[,,k]))
stats( c( VictoriaT$z[,,8]))
stats( c( VictoriaT$z[,,7]))
dim( VictoriaT$z)
for( k  in 1:203){
print( sum(
!is.na(
VictoriaT$z[,,k]
)
)
)
}
for( k  in 1:203){
print(k)
print( sum(
!is.na(
VictoriaT$z[,,k]
)
)
)
}
