rdist
load("~/Home/Teaching/RDataAnalysis/Week3/BoulderTemperature.rda")
dim( BoulderTemperature)
test<- c( 1,3,4.5, NA,10)
ind<- is.na(test)
sum( ind)
ls()
remove( list=ls())
save.image()
look<- matrix( 1:12, ncol=4, nrow=3)
look
look[2,3] <- NA
look
look2<- is.na( look)
look2
look[ look==4]
look==4
look==NA
is.numeric(look)
look<- matrix( 1:12, ncol=4, nrow=3)
look
look[2,3] <- NA
look
look2<- is.na( look)
look2
is.numeric(look)
look
apply( look, 1, "max")
apply( look, 1, "max", na.rm=TRUE)
apply( look, 2, "max")
look
image(1:3, 1:4, look, col=rainbow(256))
quartz()
image(1:3, 1:4, look, col=rainbow(256))
library( fields)
image.plot(1:3, 1:4, look, col=rainbow(256))
look[,1]
look[1,]
look
look[1:2, c(1,3)]
WB<- WorldBankCO2
library(dataWorkshop)
data(WorldBankCO2 )
WB<- WorldBankCO2
plot(CO2.cap ~ GDP.cap, data=WB, log="xy",
xlab="GDP", ylab="CO2")
quartz()
plot(CO2.cap ~ GDP.cap, data=WB, log="xy",
xlab="GDP", ylab="CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
library( spam)
library( help="spam")
help( "as.spam")
as.dgCMatrix.spam
library( spam)
help( "as.spam.dgCMatrix")
as.spam
as.spam.matrix.csr
chol
chol.default
temp<- matrix( 1:9, 3,3)
temp<- temp%*%t( temp)
temp
temp2<- chol( temp)
temp<- matrix( runif(9), 3,3)
temp<- temp%*%t( temp)
temp2<-chol( temp)
temp2
dump( temp2)
is.matrix( temp2)
attributes( temp2)
hekp( SET_SLOT)
help( SET_SLOT)
help( S4)
help( .Call)
library( Matrix)
help( as.sparse)
library( help=Matrix)
chol
showMethods( "chol")
slotNames
.slotNames
temp<- matrix( 1:9,3,3)
library( spam)
as.spam( temp)-> look
slotNames( look)
as.list( look)
dump( look)
dump( "look")
class( look)
slotNames
x@slots
look@slots
.slotNames( look)
.slotNames
isS4(look)
class( look)
getClassDef
help( classDef)
getClassDef("spam")
look
160*15
120*15
4800*1.1*1.5
library( Matrix)
sparseMatrix
help( ls)
library( spam)
ls( all.names=TRUE)
search()
ls( all.names=TRUE, pos=2)
as.spam.matrix.csr
source('~/Home/Teaching/APPM2720/Week4/RintroProgramming2.R', echo=TRUE)
mySmooth2<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- median( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
library( dataWorkshop)
data( lennon)
set.seed( 123)
data( lennon)
lennonNoise<- lennon + matrix( rnorm(256^2) *50, 256, 256)
sImage<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage[,j]<- mySmooth2( 1:256,sImage[,j], span )[,2]
}
set.panel( 1,3)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage, col=grey.colors( 256))
mySmooth<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- mean( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
mySmooth2<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- median( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
set.seed( 123)
data( lennon)
lennonNoise<- lennon + matrix( rnorm(256^2) *50, 256, 256)
sImage1<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage1[k,]<- mySmooth( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage1[,j]<- mySmooth( 1:256,sImage1[,j], span )[,2]
}
sImage2<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage2[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage2[,j]<- mySmooth2( 1:256,sImage2[,j], span )[,2]
}
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
quartz()
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
sImage1<- matrix( NA, 256, 256)
span<- 6
for( k in 1:256){
sImage1[k,]<- mySmooth( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage1[,j]<- mySmooth( 1:256,sImage1[,j], span )[,2]
}
sImage2<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage2[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage2[,j]<- mySmooth2( 1:256,sImage2[,j], span )[,2]
}
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
source('~/Home/Src/LatticeKrig/R/ModelRing.R', echo=TRUE)
library( fields)
cite( fields)
citation( "fields")
dataWorkshop()
library( dataWorkshop)
myFunction<-function(x){
naVariables<- is.na(x)
sumNa<-sum(naVariables)
return(sumNa)
}
myFunction(BoulderTemperature)
data(BoulderTemperature)
myFunction(BoulderTemperature)
apply( BouldwrTemperature, 2, myFunction)
apply( BoulderTemperature, 2, myFunction)
1e^9/38.27
(1e^9)/38.27
(10^9)/38.27
(10^9)/38.27 / 19.32
((10^9)/38.27 / 19.32)/ 10^6
((10^6)/38.27 / 19.32)/ 10^6
((10^6)/38.27 / 19.32)
((10^6)/38.27 / 19.32)^(1/3)
((10^6)/38.27 / 19.32)^(1/3) / 2.54
15,730* 19.32
15730* 19.32
15730* 19.32* 38.27
setwd("~/Home/Teaching/APPM2720/Week5")
read.table("test.txt")
look<-read.table("test.txt")
look
look
x<- runif( 100, -10, 20)
x
x<- round( x)
x
ind<- x< 0
ind
xnew<- x[ind]
xnew
xnew<- x[!ind]
xnew
y<- runif( 100, -10, 20)
y[ x > 0]
tempData <- read.csv( "2014_torn.csv", header=FALSE)
tableTornado<- table( tempData[,8])
table( tempData[,11])
table( tempData[,11], tempData[,8])
US()
library(US())
library( fields)
US()
abline(v=seq( -120,-70,by=10))
abline(v=seq( -120,-70,by=10), col="magenta", lty=3)
US()
abline(v=seq( -120,-70,by=10), col="magenta", lty=3)
US()
dev.off()
US()
dev.off()
quartz()
US()
abline(v=seq( -120,-70,by=10), col="magenta", lty=3)
tempData <- read.csv( "2014_torn.csv", header=FALSE)
tableTornado<- table( tempData[,8])
#Q4
tornado<- tempData[, c( 3,11, 16:19)]
names( tornado)<-  c( "month", "Fnumber", "lat1", "lon1", "lat2", "lon2")
#Q5
library( fields)
plot( tornado$lon1, tornado$lat1, pch=16, col=tornado$Fnumber+1, cex=.75,
xlim=c(-125,-65), ylim=c(25,50))
US( add=TRUE)
world( add=TRUE, col="grey")
WOLRD()
world()
world()
world()
abline(h=40)
plot( tornado$lon1, tornado$lat1, pch=16, col=tornado$Fnumber, cex=.75,
xlim=c(-125,-65), ylim=c(25,50))
US( add=TRUE)
world( add=TRUE, col="grey")
plot( tornado$lon1, tornado$lat1, pch=16, col=tornado$Fnumber+1, cex=.25,
xlim=c(-125,-65), ylim=c(25,50))
US( add=TRUE)
world( add=TRUE, col="grey")
plot( tornado$lon1, tornado$lat1)
world(add=TRUE)
tornado[ tornado$lat1 < 1.0,]
tempData[ tornado$lat1 < 1.0,]
plot( tornado$lon1, tornado$lat1, pch=16, col=tornado$Fnumber+1, cex=.25,
xlim=c(-125,-65), ylim=c(25,50))
US( add=TRUE)
world( add=TRUE, col="grey")
dev.off()
plot( tornado$lon1, tornado$lat1, pch=16, col=tornado$Fnumber+1, cex=.25,
xlim=c(-125,-65), ylim=c(25,50))
US( add=TRUE)
world( add=TRUE, col="grey")
