plot(CO2.cap ~ GDP.cap, data=WB, log="xy",
xlab="GDP", ylab="CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
x<- log10(WB$GDP.cap )
y<- log10( WB$CO2.cap)
plot( x,y, pch=16, col="grey", xlab="log 10 GDP", ylab="log 10 CO2")
library( spam)
library( help="spam")
help( "as.spam")
as.dgCMatrix.spam
library( spam)
help( "as.spam.dgCMatrix")
as.spam
as.spam.matrix.csr
chol
chol.default
temp<- matrix( 1:9, 3,3)
temp<- temp%*%t( temp)
temp
temp2<- chol( temp)
temp<- matrix( runif(9), 3,3)
temp<- temp%*%t( temp)
temp2<-chol( temp)
temp2
dump( temp2)
is.matrix( temp2)
attributes( temp2)
hekp( SET_SLOT)
help( SET_SLOT)
help( S4)
help( .Call)
library( Matrix)
help( as.sparse)
library( help=Matrix)
chol
showMethods( "chol")
slotNames
.slotNames
temp<- matrix( 1:9,3,3)
library( spam)
as.spam( temp)-> look
slotNames( look)
as.list( look)
dump( look)
dump( "look")
class( look)
slotNames
x@slots
look@slots
.slotNames( look)
.slotNames
isS4(look)
class( look)
getClassDef
help( classDef)
getClassDef("spam")
look
160*15
120*15
4800*1.1*1.5
library( Matrix)
sparseMatrix
help( ls)
library( spam)
ls( all.names=TRUE)
search()
ls( all.names=TRUE, pos=2)
as.spam.matrix.csr
source('~/Home/Teaching/APPM2720/Week4/RintroProgramming2.R', echo=TRUE)
mySmooth2<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- median( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
library( dataWorkshop)
data( lennon)
set.seed( 123)
data( lennon)
lennonNoise<- lennon + matrix( rnorm(256^2) *50, 256, 256)
sImage<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage[,j]<- mySmooth2( 1:256,sImage[,j], span )[,2]
}
set.panel( 1,3)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage, col=grey.colors( 256))
mySmooth<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- mean( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
mySmooth2<- function( x,y, span){
N<- length( x)
smooth<- rep( NA, N)
for( k in 1:N  ){
# two years on either side
ind <- abs( x - x[k]) <= span
smooth[k] <- median( y[ind], na.rm=TRUE )
}
result<- cbind(x, smooth)
}
set.seed( 123)
data( lennon)
lennonNoise<- lennon + matrix( rnorm(256^2) *50, 256, 256)
sImage1<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage1[k,]<- mySmooth( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage1[,j]<- mySmooth( 1:256,sImage1[,j], span )[,2]
}
sImage2<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage2[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage2[,j]<- mySmooth2( 1:256,sImage2[,j], span )[,2]
}
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
quartz()
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
sImage1<- matrix( NA, 256, 256)
span<- 6
for( k in 1:256){
sImage1[k,]<- mySmooth( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage1[,j]<- mySmooth( 1:256,sImage1[,j], span )[,2]
}
sImage2<- matrix( NA, 256, 256)
span<- 4
for( k in 1:256){
sImage2[k,]<- mySmooth2( 1:256, lennonNoise[k,], span )[,2]
}
for( j in 1:256){
sImage2[,j]<- mySmooth2( 1:256,sImage2[,j], span )[,2]
}
set.panel( 2,2)
image( lennon, col=grey.colors( 256))
image( lennonNoise, col=grey.colors( 256))
image( sImage1, col=grey.colors( 256))
image( sImage2, col=grey.colors( 256))
source('~/Home/Src/LatticeKrig/R/ModelRing.R', echo=TRUE)
library( fields)
cite( fields)
citation( "fields")
dataWorkshop()
library( dataWorkshop)
myFunction<-function(x){
naVariables<- is.na(x)
sumNa<-sum(naVariables)
return(sumNa)
}
myFunction(BoulderTemperature)
data(BoulderTemperature)
myFunction(BoulderTemperature)
apply( BouldwrTemperature, 2, myFunction)
apply( BoulderTemperature, 2, myFunction)
1e^9/38.27
(1e^9)/38.27
(10^9)/38.27
(10^9)/38.27 / 19.32
((10^9)/38.27 / 19.32)/ 10^6
((10^6)/38.27 / 19.32)/ 10^6
((10^6)/38.27 / 19.32)
((10^6)/38.27 / 19.32)^(1/3)
((10^6)/38.27 / 19.32)^(1/3) / 2.54
15,730* 19.32
15730* 19.32
15730* 19.32* 38.27
library( fields)
citation( fields)
citation( 'fields')
look<- read.table( "~/Downloads/movies.tab")
look<- m <- read.table("`/Downloads/movies.tab", sep="\t", header=TRUE, quote="", comment="")
look<- m <- read.table("~/Downloads/movies.tab", sep="\t", header=TRUE, quote="", comment="")
rm( look)
dim( m)
m[1,]
m[1:2,]
m[1:5,]
m[1:5,1:6]
hist( m[,3])
library( m[,3])
library( fields)
stats( m[,3])
hist( log10(m[,3])
)
hist( log10(m[,3]), N=30)
hist( log10(m[,3]), nclass=30)
ls()
summary( m)
ls()
m <- read.table("~/Downloads/movies.tab", sep="\t", header=TRUE, quote="", comment="")
m[1,]
table( round(m$votes,3))
table( round(m$votes/1000))
table( round(m$votes/1000)* 1000)
m[1,]
plot( m$budget, m$votes)
plot( m$budget, m$votes, log="x")
plot( m$budget, m$rating, log="x")
plot( m$budget, m$rating)
x<- c( 10 ,100, 1000, 3000, 10000)#
y<-( 1:5)#
# not very helpful#
plot( x,y)
x<- c( 10 ,100, 1000, 3000, 50000)#
y<-( 1:5)#
# not very helpful#
plot( x,y)
x<- c( 10 ,100, 1000, 3000, 50000)#
y<-(1:4,10)#
# not very helpful#
plot( x,y)
x<- c( 10 ,100, 1000, 3000, 50000)#
y<-c(1:4,10)#
# not very helpful#
plot( x,y)
xlog<- log10( x)#
plot( xlog, y)
log10(x)
x<- c( 1, 5, 10 ,100, 1000, 3000, 50000)#
y<-c(1:6,10)#
# not very helpful#
plot( x,y)
x<- c( 1, 5, 10 ,100, 1000, 3000, 50000)#
y<-c(1:6,10)#
# not very helpful#
plot( x,y, log="x")
x<- c( 1, 5, 10 ,100, 1000, 3000, 50000)#
y<-c(1:6,20)#
# not very helpful#
plot( x,y)
x<- c( 1, 5, 10 ,100, 1000, 3000, 50000)#
y<-c(1:6,10)#
# not very helpful#
plot( x,y, log="x")
xlog<- log10( x)#
plot( xlog, y)
30*627000
acos( 1/sqrt(3))
acos( 1/sqrt(3))*(180/pi)
read.csv("~/Downloads/table.csv")
read.csv("~/Downloads/table.csv")-> look
look[1,]
plot( look[,3:4])
plot( look[,3], look[,4]- look[,3])
bplot.xy(look[,3], look[,4]- look[,3])
library( fields)
bplot.xy(look[,3], look[,4]- look[,3])
bplot.xy(look[,3], (look[,4]- look[,3])/ look[,3])
look[1:100,]
look[,1]<- as.date( look[,1])
help( "Date")
look[,1]<- as.Date( look[,1])
look[1:100,1]
month( look[,1])
months( look[,1])
years( look[,1])
year( look[,1])
Year( look[,1])
help( "months")
weekdays( look[,1])
boxplot( look[,5] ~weekdays( look[,1]))
setwd("~/Home/Teaching/APPM2720/Week6")
library(jpeg)
dir()
setwd("~/Home/Teaching/APPM2720/Week6")
norlin<- readJPEG("CUNorlinQuad.jpg")
dim( norlin)
hist( norlin[,2])
hist( norlin[,,2])
plot( as.raster( norlin))
dev.off()
plot( as.raster( norlin))
out<- norlin[,,2]
out<- out[ out>.9]<- NA
norlin2<- norlin
norlin2[,,2]<- out
plot( as.raster( norlin2))
out<- out[ out>.9]<- 0
norlin2[,,2]<- out
plot( as.raster( norlin2))
norlin2[,,1]<- 0
norlin2[,,3]<- 0
norlin2[,,2]<- norlin[,,2]
plot( as.raster( norlin2))
dev.off()
quartz()
plot( as.raster( norlin2))
length( unique( as.raster( norlin)))
187
test1<- scan("testI1.txt")
test1B<- array( test1, c(11,17) )
test1
test1B
test1B
image( test1)
image( test1B)
greyScale<- grey( seq( 0,1,,256))
greyScale
image(test1B, col=greyScale)
data(lennon)
library( fields)
data( lennon)
image(lennon, col=greyScale)
args( seq)
args( seq.default)
greyScale<- grey( seq( from= 0, to =1, length.out=256) )
seq( from= 0, to =1, length.out=256)
(0:256)/256
help("grey")
grey( .5)
image(lennon, col=tim.colors(256))
scan("testI2.txt")
test2<- scan("testI2.txt")
test2B<- array(test2, c(11,17))
image( test2B)
test2B<- array(test2, c(17,11))
image( test2B)
test2C<- aperm( test2B, c(2,1) )
image( test2C)
dim( test2B)
dim( test2C)
library(jpeg)
CULogo<- readJPEG("Colorado-Buffaloes-Logo.jpg")
library( raster)
rasterCULogo<- as.raster( CULogo)
plot( rasterCULogo)
CULogo[950,720,]
CULogo[720,950,]
rasterCULogo[720,950]
plot( 1:4, col="#CFB97D", cex=3, pch=16)
dim( rasterCULogo )
test<- rasterCULogo[,2100:1]
class( test)
plot( test)
1534*2100
1534*2100 * 8
1534*2100 * 8/1^6
1534*2100 * 8
dim( test)
box()
