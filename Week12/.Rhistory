)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.01,
nlevel=3, alpha=c(1.0,.25,.25^2),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.01,
nlevel=3, alpha=c(1.0,.25,.25^2), overlap=3.0,
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKinfo$LatticeInfo$grid[[1]], col="magenta")
points( LKinfoBad$LatticeInfo$grid[[1]], col="magenta")
plot( LKinfoBad$LatticeInfo$grid[[1]], col="magenta")
points( LKrigLatticeCenters(LKinfoBad,1), col="magenta")
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters(LKinfoBad,1), col="magenta")
points( LKrigLatticeCenters(LKinfoBad,2), col="magenta", pch=".")
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.01,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=4, LKGeometry="LKSphere", a.wght=6.005,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.01,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoBad<- LKrigSetup( x,
NC=2, LKGeometry="LKSphere", a.wght=6.001,
nlevel=3, alpha=c(1.0,.25,.25^2), overlap=3.0,
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=3, LKGeometry="LKSphere", a.wght=6.001,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
# this is bad!
LKinfoBad<- LKrigSetup( x,
NC=4, LKGeometry="LKSphere", a.wght=6.1,
nlevel=1, alpha=c(1.0),
normalize=TRUE)
# this took around 25 seconds NC=3, nlevel=3, N=5000
system.time(
look<- LatticeKrig( x, y, LKinfo=LKinfoBad)
)
look2<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed/1e3)
look3<- LKrig( x, y, LKinfo=LKinfoBad, lambda = look$lambda.fixed*1e3)
quartz()
set.panel( 2,2)
image.plot( trueSurface)
contour(  trueSurface,add=TRUE)
surface( look,  gridList, nx=100, ny=100)
surface( look2, gridList, nx=100, ny=100)
title("under smooth")
points( LKrigLatticeCenters( LKinfoBad,1), col="magenta", pch=16, cex=.5)
surface( look3, gridList, nx=100, ny=100)
title("over smooth")
# dev.copy2pdf(file="GoodCase.pdf",width=8, height=8)
# dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
dev.copy2pdf(file="BadCase.pdf",width=8, height=8)
LKinfoGood
LKinfoBad
library( fields)
ls(pos=2)
MLESpatialProcess
library( LatticeKrig)
test.for.zero.flag<- 1
data( ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
range(x[,1])
range(x[,2])
xTest<- rbind(x, c( -100,20)
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest)
xTest<- rbind(x, c( -100,20) )
yTest<- c( y, 1000)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
xTest<- rbind(x, x)
yTest<- c( y, y)
LKinfoTest<- LKrigSetup( x, NC=5, nlevel=3, nu=1, a.wght=5)
obj<- LKrig( xTest,yTest, LKinfo= LKinfoTest, lambda=.1)
20 + 10 + 10 + 8 + 10 + 4 + 10 + 7
20 + 10 + 10 + 10 + 10 + 4 + 10 + 7
20 +10 + 10 +10 +10 +4 +10 +7
20 + 8 + 15 + 15 + 10 + 4 + 10 + 10
qnorm( .25)
-qnorm( .25)*2
20 + 10 + 15 + 12 +5 +2
setwd("~/Home/Teaching/APPM2720/Week12")
help( "expression-class")
test<- "ls()"
test1<- as.expression( test)
test1
call( test1)
call( test)
help( parse)
eval( test1)
eval( test)
eval( ls)
eval( ls())
test
eval( test)
test<- as.expression( test)
class( test)
eval( test)
remove( list=ls())
dir()
load(spam.RData")
source("ROC.point.R")
load("spam.RData")
source("ROC.point.R")
ls()
sum( train)
fitAll<- glm( spam ~ . , subset=train,
family =binomial, data=dat)
summary( fitAll)
test.data<- dat[train, "spam"]
test.data
test.data<- dat[!train, "spam"]
test.data
sum( !train)
test.prob<- predict( fitAll, type="response",
newdata=dat[!train,])
test.prob
ls()
ROC.point
cutPs<- seq( 0, 1,.01)
results<- ROC.point(cutPs, test.prob, test.data )
results
plot( c(0,1), c(0,1), type="l" , xlab="FPR", ylab="TPR")
lines( results, lwd=2, col="brown")
bag<- function(){
fitAll<- glm( spam ~ . , subset=train,
family =binomial, data=dat)
test.data<- dat[!train, "spam"]
test.prob<- predict( fitAll, type="response",
newdata=dat[!train,])
cutPs<- seq( 0, 1,.01)
results<- ROC.point(cutPs, test.prob, test.data )
return(results)
}
look<- bag()
lines( look, col="magenta")
bag<- function(train0){
fitAll<- glm( spam ~ . , subset=train0,
family =binomial, data=dat)
test.data<- dat[!train0, "spam"]
test.prob<- predict( fitAll, type="response",
newdata=dat[!train0,])
cutPs<- seq( 0, 1,.01)
results<- ROC.point(cutPs, test.prob, test.data )
return(results)
}
bag()
bag(train)
runif(10, 1,100)
runif(10, 1,4800)
round(runif(10, 1,4800))
length( train)
trainEXP<-   c( rep( FALSE,1000), rep(TRUE, 3601 ))
sum( trainEXP)
trainEXP
u<- runif( 10)
u
order( u)
look<- trainEXP[order( u)]
look
trainEXP<-   c( rep( FALSE,1000), rep(TRUE, 3601 ))
u<- runif( 4601)
look<- trainEXP[order( u)]
trainEXP
look
trainEXP<-   c( rep( FALSE,1000), rep(TRUE, 3601 ))
plot( c(0,1), c(0,1), type="l" , xlab="FPR", ylab="TPR")
lines( results, lwd=2, col="brown")
trainTemp<- trainEXP[ order(
runif( 4601)
)
]
results2<- bag( trainTemp)
lines(results2, col="orange")
trainEXP<-   c( rep( FALSE,1000), rep(TRUE, 3601 ))
plot( c(0,1), c(0,1), type="l" , xlab="FPR", ylab="TPR")
results<- bag( train)
lines( results, lwd=2, col="brown")
trainTemp<- trainEXP[ order(
runif( 4601)
)
]
results2<- bag( trainTemp)
lines(results2, col="orange")
for( k in 1:20{
results2<- bag( trainTemp )
lines(results2, col="orange")
}
for( k in 1:20{
results2<- bag( trainTemp )
lines(results2, col="orange")
}
for( k in 1:20){
results2<- bag( trainTemp )
lines(results2, col="orange")
}
warnings
warnings()
for( k in 1:20){
trainTemp<- trainEXP[ order(
runif( 4601)
)
]
results2<- bag( trainTemp )
lines(results2, col="orange")
}
for( k in 1:20){
trainTemp<- trainEXP[ order(
runif( 4601)
)
]
results2<- bag( trainTemp )
lines(results2, col=k)
}
VN<- names(dat)
VN
VN<- names(dat)
VN<- as.character(VN)
VN
A<- "capLong"
B<- "business"
paste( A, B, collapse=" + ")
paste( A, B, collapse="+")
paste( A, B, collapse=+)
paste( A, B, collapse="+")
paste( c(A, B), collapse="+")
paste( c(A, B), collapse=" + ")
AB<- paste( c(A, B), collapse=" + ")
AB
for1<- paste( "spam ~ ", AB)
for1
fit0<- glm( for1, subset=train, data=dat, family=binomial)
fit0
summary( fit0)
for1
A<- "capLong"
B<- "business"
AB<- paste( c(A, B), collapse=" + ")
for1<- paste( "spam ~ ", AB)
for1<- as.formula( for1)
for1
fit0<- glm( for1, subset=train, data=dat, family=binomial)
look<- summary( fit)
look<- summary( fitAll)
look
names( look)
look$coefficients
ind<-  abs( look[,3]  ) > 2
dim( look)
ind<-  abs( look$coefficients[,3]  ) > 2
ind
sum( ind)
length( 57)
length( ind)
ind<- ind[2:58]
sum( ind)
VN[ind]
allGood<- paste( VN[ind], collapse=" + ")
allGood
forGood<- as.formula(
paste("spam ~", allGood)
)
forGood
fitLast<- glm( forGood, data= dat,subset=train, family=binomail)
fitLast<- glm( forGood, data= dat,subset=train,
family=binomial)
fitlast.prob<- predict( fitLast, newdata=dat[!train,],
type="response")
resultsLast<- ROC.point( cutPs, fitlast.prob, test.data )
lines(resultsLast, col="magenta", lwd=2 )
